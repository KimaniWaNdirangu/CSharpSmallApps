public interface IMortageEvaluator { string Evaluate(Customer customer); } public class SavingsChecker : IMortageEvaluator { public string Evaluate(Customer customer) { if (HasSufficientSavings(customer)) { return "Has sufficient savings"; } else { return "Has not met mininmum savings"; } } private bool HasSufficientSavings(Customer customer) { return true; } } public class CreditChecker : IMortageEvaluator { public string Evaluate(Customer customer) { if (HasGoodCredit(customer)) { return "Has outstanding credit history"; } else { return "Credit history needs improvement"; } } private bool HasGoodCredit(Customer c) { return true; } } public class LoanChecker : IMortageEvaluator { public string Evaluate(Customer customer) { if (HasNoBadLoans(customer)) { return "Has no bad loans"; } else { return "Has bad loans"; } } public bool HasNoBadLoans(Customer c) { return true; } } public class Customer { private string _name; // Constructor public Customer(string name) { this._name = name; } // Gets the name public string Name { get { return _name; } } } class Mortgage : IMortageEvaluator { List<IMortageEvaluator> _evaluationCriteria = new List<IMortageEvaluator>(); public Mortgage() { _evaluationCriteria.Add(new SavingsChecker()); _evaluationCriteria.Add(new CreditChecker()); _evaluationCriteria.Add(new LoanChecker()); } public string Evaluate(Customer customer) { StringBuilder history = new StringBuilder(); foreach (IMortageEvaluator criterion in _evaluationCriteria) { history.AppendLine(criterion.Evaluate(customer)); } return history.ToString(); } } class Program { static void Main(string[] args) { // Evaluate mortgage eligibility for customer Customer customer = new Customer("Ann McKinsey"); Mortgage mortgage = new Mortgage(); Console.WriteLine(mortgage.Evaluate(customer)); // Wait for user Console.ReadKey(); } }